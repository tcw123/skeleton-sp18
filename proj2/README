# 骨架代码结构
框架代码包含两个将要使用的关键软件包：`byog.TileEngine`和`byog.Core`。`byog.TileEngine`提供了一些渲染的基本方法以及图块的基本代码结构，并包含：
* `TERenderer.java`
-包含与渲染相关的方法。
* `TETile.java`
-用于表示世界上瓷砖的类型。
* `Tileset.java`
-提供的图块库。
* `RandomUtils.java` -方便的实用方法，用于进行与随机性有关的事情。
* `Main.java`-玩家如何开始游戏。读取命令行参数并在中调用适当的函数`Game.java`。
* `Game.java` -包含两种允许您玩游戏的方法。

`byog.Core.Game`提供了两种玩游戏的方法。首先是`public TETile[][] playWithInputString(String input)`。此方法将一系列键盘输入作为输入，并在处理输入中提供的所有按键后返回代表宇宙状态的2D TETile数组（如下所述）。第二个是`public void playWithKeyboard()`。此方法从键盘获取输入，并将每次按键的结果绘制到屏幕上。
游戏引擎大量使用`StdDraw`。

# Phase1 构造游戏世界
如上所述，该项目的第一个目标是编写一个世界生成器。下面列出了您的世界的要求：
* 世界必须是使用我们的图块引擎绘制的2D网格。切片引擎在 [lab5中进行了](https://sp18.datastructur.es/materials/lab/lab5/lab5) 描述。
* 世界必须是伪随机生成的。伪随机性在实验5中进行了讨论。
* 生成的世界必须包括房间和走廊，尽管它可能还包括室外空间。
* 至少一些房间应该是矩形的，尽管您也可以支持其他形状。
* 您的游戏必须能够生成包含转弯的走廊（或等效地，相交的直线走廊）。
* 世界应该包含随机数量的房间和走廊。
* 房间和走廊的位置应该是随机的。
* 房间的宽度和高度应该是随机的。
* 走廊的长度应该是随机的。
* 房间和走廊的墙壁在视觉上必须与地板不同。墙壁和地板在视觉上应与未使用的空间区分开。
* 房间和走廊应连通，即相邻房间或走廊之间的地板上不应有空隙。
* 每次世界应该大不相同，也就是说，您不应该具有易于预测的功能的相同基本布局

# Phase2 交互
交互性要求如下：
* 播放器必须能够使用W，A，S和D键控制可以移动的某种实体。实验6介绍了如何在游戏中包含交互性。
* 实体必须能够以某种方式与世界互动。
* 您的游戏必须具有确定性，因为来自同一种子的相同按键序列每次都必须导致完全相同的行为。如果使用伪随机数生成器就可以了，因为Random可以保证对象每次输出相同的随机数。
（可选）您可能还包括允许玩家获胜或输掉的游戏机制（请参阅下面的黄金积分）。除了这些功能要求之外，您的游戏还会有一些技术要求，下面将详细介绍。

